init() = always first

display.set_mode() = creates Surface object -> screen, 
parameter is tuple (width, height)

display.set_caption() = sets caption text of the window
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
Game loop:
1. Handle event
2. Update game state
3. Draw game state to screen

Event object = created every time user does something (presses key for example)
pygame.event.get() = returns list of Events that happened since last game state

colors = tuple of three ints (r, g, b) or four ints (r, g, b, alpha), where alpha
is transparency of the color
Color object = equivalent to tuple of three/four

rectangle = tuple of four ints (top-left corner x, top-left corner y, width, height)
Rect object = equivalent to tuple of four
-------------------------------------------------------------------------------
1. Handle event = iterate through list of Events and handle each event

event.type = type of the event:
				QUIT = user quit the game, after this always call
				pygame.quit() and sys.exit()
				KEYDOWN = key was pressed
				KEYUP = key was released
event.key = what key was pressed
--------------------------------------------------------------------------------
2. Update game state

change variables according to the event
---------------------------------------------------------------------------------
3. Draw game state to the screen
pygame.draw.something() = draw something to the Surface (for example rect)

PixelArray object = an array of pixels, basically like cutting an area out of the
Surface in Paint, you can change individual pixels in pixel array this way
After you finish changing pixels, delete the PixelArray using 'del'

pygame.display.update() = draw Surface object on the screen
-------------------------------------------------------------------------------

Clock object = makes sure the game runs at stable FPS rate
tick() = method of the Clock, call at the end of every game loop

pygame.image.load() = creates Surface with the image drawn on it
blit(img, (x, y)) = draws the Surface with the image to the display Surface 
on coordinates (x, y), those are coordinates of the top-left corner of the image